
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with role-based access
model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  emailVerified   DateTime?
  hashedPassword  String?
  image           String?
  role            Role      @default(USER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  orders          Order[]
  sessions        Session[]
}

// Session model for authentication
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Product model
model Product {
  id          String         @id @default(cuid())
  name        String
  description String?
  price       Decimal        @db.Decimal(10, 2)
  inventory   Int            @default(0)
  imageUrl    String?
  category    Category       @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  orderItems  OrderItem[]
}

// Category model for products
model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Order model
model Order {
  id           String      @id @default(cuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  status       OrderStatus @default(PENDING)
  total        Decimal     @db.Decimal(10, 2)
  items        OrderItem[]
  shippingAddress String?
  paymentMethod String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

// OrderItem model (order-product relationship)
model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  @@unique([orderId, productId])
}

// Enums
enum Role {
  USER
  ANALYST
  MANAGER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}
